// <auto-generated />
using System;
using CarsApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarsApi.Migrations
{
    [DbContext(typeof(CarsApiContext))]
    [Migration("20241219204134_MigrationName")]
    partial class MigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarsApi.Models.Car", b =>
                {
                    b.Property<long>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_car");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdCar"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("brand");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.HasKey("IdCar");

                    b.HasIndex("Id");

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("PK__channels__3213E83FF13B4603");

                    b.HasIndex("OwnerId");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.Comment", b =>
                {
                    b.Property<long>("IdCom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_com");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdCom"));

                    b.Property<long>("ComPost")
                        .HasColumnType("bigint")
                        .HasColumnName("com_post");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("content");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.HasKey("IdCom");

                    b.HasIndex("ComPost");

                    b.HasIndex("Id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.Event", b =>
                {
                    b.Property<long>("IdEvent")
                        .HasColumnType("bigint")
                        .HasColumnName("id_event");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("IdEvent");

                    b.HasIndex("IdUser");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasPrecision(6)
                        .HasColumnType("datetimeoffset(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__posts__3213E83F79A02219");

                    b.HasIndex("ChannelId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.Trip", b =>
                {
                    b.Property<long>("IdTrip")
                        .HasColumnType("bigint")
                        .HasColumnName("id_trip");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndData")
                        .HasColumnType("datetime")
                        .HasColumnName("end_data");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<DateTime>("StartData")
                        .HasColumnType("datetime")
                        .HasColumnName("start_data");

                    b.HasKey("IdTrip");

                    b.HasIndex("IdUser");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83FD758E07C");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Follower", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<long>("IdChannel")
                        .HasColumnType("bigint")
                        .HasColumnName("id_channel");

                    b.HasKey("IdUser", "IdChannel");

                    b.HasIndex("IdChannel");

                    b.ToTable("followers", (string)null);
                });

            modelBuilder.Entity("Like", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("LikePost")
                        .HasColumnType("bigint")
                        .HasColumnName("like_post");

                    b.HasKey("Id", "LikePost");

                    b.HasIndex("LikePost");

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("Tripsparticipation", b =>
                {
                    b.Property<long>("IdTrip")
                        .HasColumnType("bigint")
                        .HasColumnName("id_trip");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.HasKey("IdTrip", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("tripsparticipation", (string)null);
                });

            modelBuilder.Entity("CarsApi.Models.Car", b =>
                {
                    b.HasOne("CarsApi.Models.User", "IdNavigation")
                        .WithMany("Cars")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_cars_users");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("CarsApi.Models.Channel", b =>
                {
                    b.HasOne("CarsApi.Models.User", "Owner")
                        .WithMany("Channels")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FKc6sorav30ddgywp6vt99wen6x");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarsApi.Models.Comment", b =>
                {
                    b.HasOne("CarsApi.Models.Post", "ComPostNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("ComPost")
                        .IsRequired()
                        .HasConstraintName("FK_comment_posts");

                    b.HasOne("CarsApi.Models.User", "IdNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_comment_users");

                    b.Navigation("ComPostNavigation");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("CarsApi.Models.Event", b =>
                {
                    b.HasOne("CarsApi.Models.User", "IdUserNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_events_users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("CarsApi.Models.Post", b =>
                {
                    b.HasOne("CarsApi.Models.Channel", "Channel")
                        .WithMany("Posts")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK5d144ba1aao7dgdj6ksonkp32");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("CarsApi.Models.Trip", b =>
                {
                    b.HasOne("CarsApi.Models.User", "IdUserNavigation")
                        .WithMany("Trips")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_trips_users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Follower", b =>
                {
                    b.HasOne("CarsApi.Models.Channel", null)
                        .WithMany()
                        .HasForeignKey("IdChannel")
                        .IsRequired()
                        .HasConstraintName("FK_followers_channels");

                    b.HasOne("CarsApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_followers_users");
                });

            modelBuilder.Entity("Like", b =>
                {
                    b.HasOne("CarsApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_likes_users");

                    b.HasOne("CarsApi.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("LikePost")
                        .IsRequired()
                        .HasConstraintName("FK_likes_posts");
                });

            modelBuilder.Entity("Tripsparticipation", b =>
                {
                    b.HasOne("CarsApi.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("IdTrip")
                        .IsRequired()
                        .HasConstraintName("FK_tripsparticipation_trips");

                    b.HasOne("CarsApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_tripsparticipation_users");
                });

            modelBuilder.Entity("CarsApi.Models.Channel", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CarsApi.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CarsApi.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Channels");

                    b.Navigation("Comments");

                    b.Navigation("Events");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
